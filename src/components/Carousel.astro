---
import FeaturedArticleCard from "./FeaturedArticleCard.astro";
import {type CollectionEntry} from "astro:content";

type WritingEntry = CollectionEntry<'writing'>;
type PorfolioEntry = CollectionEntry<'portfolio'>;
type FeaturedEntry = PorfolioEntry | WritingEntry

const {carouselData} = Astro.props;

// max length depending 
const CarouselMaxLength = (carouselData.length * 21).toString() + "rem";

const testCarouselData = [...carouselData];
// if 
const buttonHiddenClass = (testCarouselData.length === 1) ? "hidden" : "";
const centerSingleFeaturedArticleClass = (testCarouselData.length === 1) ? "justify-center content-center" : "";
---

<!-- Why inline style? Tailwind's JIT compiler can only extract statically analyzable classnames during build time -->
<div class={`w-full `} style={`max-width: ${CarouselMaxLength};`}>
    {/* the carousel is hidden until the javascript is executed. the placeholder is used to prevent layout shifts */}
    {/* embla__viewport is the viewport of the carousel, embla__container is the container of the carousel items */}
    {/* embla__button--prev and embla__button--next are the buttons for previous and next respectively */}
    {/* grid is for overlapping buttons (isLoading? "hidden":)*/}
    <div class={"w-full grid grid-cols-[1fr_1fr] embla hidden"}>
        <!-- embla part h-42 overflow-hidden-->
        <div class=" w-full col-[1_/_3] row-[1_/_2] overflow-hidden embla__viewport">
            <!-- viewport carousel-sm:justify-center -->
            <div class={`flex mt-5 col-[1_/_4] [&>*]:m-2 embla__container ${centerSingleFeaturedArticleClass}`}>
            <!--  -->
            {/*using center for the alignment is very weird as it reformatted on screen. align: start is used instead*/
                (testCarouselData.length > 1) ? (
                    [...testCarouselData, ...testCarouselData].map((carouselDatum : FeaturedEntry ) =>
                        <FeaturedArticleCard featuredArticleData={carouselDatum}/>
                    )
            ) : (
                <article class=" flex justify-center content-center">
                    {/* Thumbnail. h & w need to be full as img is a container for the img. This makes object-cover work grid-cols-[minmax(_18rem,18rem)*/}
                    {/* title description thingy. Max  _20rem*/}
                    <FeaturedArticleCard featuredArticleData={testCarouselData[0]}/>
                </article>
            )
            }
            </div>
        </div>
        {/* using absolute position is a bit wonky as it will change z-index and thus interactivity
        of the carousel. positioning using flex and margin is required. for SVG, consider changing svg
        d attribute so that center is not necessary */}
        <div class={`flex justify-start col-[1_/_2] row-[1_/_2] mb-5 ${buttonHiddenClass}`}>
            <button class="flex justify-center items-center self-center w-12 h-12 bg-black z-10 ml-5 round embla__button--prev">
                <svg width="25px" height="25px" viewBox="0 0 24 24">
                    <path xmlns="http://www.w3.org/2000/svg" d="M10.122 24l-4.122-4 8-8-8-8 4.122-4 11.878 12z" 
                    stroke="white" fill="white" style={{transform:"scale(-1, 1) translate(-100%, 0px)"}}/>
                </svg>
            </button>
        </div>
        <div class={`flex justify-end col-[2_/_3] row-[1_/_2] mb-5 ${buttonHiddenClass}`}>
            <button class="flex justify-center items-center self-center w-12 h-12 bg-black z-10 mr-5 round embla__button--next">
                <svg width="25px" height="25px" viewBox="0 0 24 24">
                    <path xmlns="http://www.w3.org/2000/svg" d="M10.122 24l-4.122-4 8-8-8-8 4.122-4 11.878 12z" stroke="white" fill="white"/>
                </svg>
            </button>
        </div>
    </div>
    <div class={"flex content-align justify-center placeholder"}>
        <!-- height must be exactly 38.25 to prevent layout shifts once the carousel is revealed -->
        <svg width="250" height="38.25rem" >
            <rect x="5" y="296" width="40" height="80" rx="5" ry="5">
            </rect>
            <rect x="50" y="291" width="45" height="90"  rx="5" ry="5">
            </rect>
            <rect x="100" y="286" width="50" height="100" rx="5" ry="5">
            </rect>
            <rect x="155" y="291" width="45" height="90" rx="5" ry="5">
            </rect>
            <rect x="205" y="296" width="40" height="80" rx="5" ry="5">
            </rect>
            <rect x="250" y="301" width="35" height="70" rx="5" ry="5">
            </rect>
        </svg>
    </div>
</div>


<script >
    // NOTE: Below implements the carousel I don't quite understand the javascript code below.
    // the carousel is hidden and a placeholder is in its place until all the carousel
    // setup is executed. the placeholder is hidden first then the carousel is revealed
    import EmblaCarousel, { type EmblaOptionsType, type EmblaCarouselType } from 'embla-carousel';
    // ,
    const OPTIONS: EmblaOptionsType = {dragFree: true, loop: true, duration: 10};
    const viewportNode = document.querySelector('.embla__viewport') as HTMLElement;
    const emblaApi = EmblaCarousel(viewportNode, OPTIONS);

    const placeholder = document.querySelector('.placeholder') as HTMLElement;
    placeholder.classList.add("hidden");
    const emblaNode = document.querySelector('.embla') as HTMLElement;
    emblaNode.classList.remove("hidden")
    
    const scrollPrev = (): void =>  {
        emblaApi.scrollPrev();
    }
    let prevBtnNode = document.querySelector('.embla__button--prev') as HTMLElement;
    prevBtnNode.addEventListener('click', scrollPrev, false);

    const scrollNext = (): void =>  {
        emblaApi.scrollNext();
    }
    let nextBtnNode = document.querySelector('.embla__button--next') as HTMLElement;
    nextBtnNode.addEventListener('click', scrollNext, false);
    

</script>